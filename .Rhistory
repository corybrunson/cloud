int<lower=1> N; // Sample size
int<lower=1> K; // Dimension of model matrix
matrix[N, K] X; // Model Matrix
vector[N] y; // Target variable
}
/*
transformed data { // Transformed data block. Not used presently.
}
*/
parameters { // Parameters block
vector[K] beta; // Coefficient vector
real<lower=0> sigma; // Error scale
}
model { // Model block
vector[N] mu;
mu <- X * beta; // Creation of linear predictor
// priors
beta ~ normal(0, 10);
sigma ~ cauchy(0, 5); // With sigma bounded at 0, this is half-cauchy
// likelihood
y ~ normal(mu, sigma);
}
generated quantities{
real rss;
real totalss;
real<lower=0, upper=1> R2;
vector[N] mu;
mu <- X * beta;
rss <- dot_self(y-mu);
totalss <- dot_self(y-mean(y));
R2 <- 1 - rss/totalss;
}
"
fitRsq = stan(model_code=stanmodelcodeRsq, data=dat, iter=12000,
warmup=2000, thin=10, chains=3)
rss = crossprod(resid(modlm))
totalss = crossprod(y-mean(y))
1-rss/totalss; summary(modlm)$r.squared
print(fitRsq, digits=3, par=c('beta','sigma','R2'), prob=c(.025,.5,.975))
summary(modlm)$adj
install.packages('devtools')
rm(list=ls())
install_github('rmcelreath/glmer2stan')
library(devtools)
install_github('rmcelreath/glmer2stan')
source('http://mc-stan.org/rstan/install.R',
echo = TRUE, max.deparse.length = 2000)
install_rstan()
source_url("https://github.com/stan-dev/shinystan/raw/develop/install_shinystan.R")
install.packages('lmerTest')
library(shinyStan)
install.packages("shinyStan")
install.packages("shinystan")
library(shinystan)
library(glmer2stan)
library(rstan)
library(lmerTest)
height = rnorm(100)
earn = height + rnorm(100)
dat = data.frame(height,earn)
dat
library(ggplot2)
qplot(height,earn)+geom_smooth(method=lm,se=F)
summary(lm(earn~height,data = dat))
confint(lm(earn~height,data = dat))
earn_dat <- list(N = 100 , #specify number of observations as a scalar
earn = earn, # data vector
height = height # data vector (predictor)
)
earn_code = 'data {
// First we declare all of our variables in the data block
int<lower=0> N;// Number of observations
vector[N] earn; //Identify our predictor as a vector
vector[N] height;  //Identify our outcome variable as a vector
}
parameters {
vector[2] beta; //Our betas are a vector of length 2 (intercept and slope)
real<lower=0> sigma; //error parameter
}
model {
//Priors
beta[1] ~ normal( 5 , .001); //intercept
beta[2] ~ normal( 0 , 100 ); //slope
sigma ~ uniform( 0 , 100 ); //error
earn ~ normal(beta[1] + beta[2] * height, sigma);
}'
fit1 <- stan(model_code = earn_code, data = earn_dat,
warmup = 100,
iter = 1000,
chains = 4)
print(fit1)
fit1_samples = extract(fit1)
str(fit1_samples)
betas = fit1_samples[[1]]
qplot(betas[,1]) # intercept posterior samples
qplot(betas[,2]) # slope posterior samples
int = mean(betas[,1]) # posterior intercept estimate
slope = mean(betas[,2])# posterior slope estimate
qplot(height,earn)+geom_smooth(method=lm,se=F)+
geom_abline(intercept=int,slope=slope,color='red')
traceplot(fit1)
data(sleepstudy) # load data
library(ggplot2)
m1_lm <- lm(Reaction~Days,data=sleepstudy)
confint(m1_lm)
summary(m1_lm)
ggplot(sleepstudy,aes(x=Days,y=Reaction))+
geom_point()+
guides(color=F)+
geom_smooth(method=lm,se = F)
ggplot(sleepstudy,aes(x=Days,y=Reaction,color=Subject,group=Subject))+
geom_point()+
guides(color=F)+
geom_smooth(method=lm,se = F)
m1_lme4 <- lmer( Reaction ~ Days + (Days | Subject), sleepstudy, REML=FALSE )
summary(m1_lme4)
confint(m1_lme4)
dim(sleepstudy)
head(sleepstudy)
?confint
?confint.lme4
traceplot(fit1)
AIC(m1_lm,m1_lme4)
confint(m1_lme4)
confint(m1_lm)
unique(sleepstudy$Subject)
unique(sleepstudy$Days)
fit
fit <- lmer(Reaction ~ Days + (1 | Subject), sleepstudy, REML=F)
confint(fit)
sleepstudy$subject_index <- as.integer(as.factor(sleepstudy$Subject))
head(sleepstudy)
nwarm = 100 # burn-in period, these samples are not included in estimation
niter = 500 # number of steps per chain, more is better (but takes longer)
chains = 4 # number of chains, usually at least 2
m1_g2s <- lmer2stan( Reaction ~ Days + (Days | subject_index), data=sleepstudy,
calcWAIC=T,
warmup=nwarm,
iter = niter,
chains=chains)
as.numeric(sleepstudy$Subject)
print(m1_g2s) # standard stan output
stanmer(m1_g2s) # cleaned up stan output
plot(m1_g2s) # *looks like shit
traceplot(m1_g2s)
traceplot(m1_g2s)
?lmer2stan
?lm2stan
install.packages("systemfit")
library(systemfit)
data(Kmenta)
attach(Kmenta)
eqDemand <- consump ~ price + income
eqSupply <- consump ~ price + farmPrice + trend
str(Kmenta)
eqSystem <- list(demand = eqDemand, supply = eqSupply)
fitols <- systemfit(eqSystem)
print(fitols)
fitsur <- systemfit(eqSystem, method = "SUR")
print(fitsur)
fit3sls <- systemfit(eqSystem, method = "3SLS",
inst = ~ income + farmPrice + trend)
fit3sls2 <- systemfit(eqSystem, method = "3SLS",
inst = list(~ farmPrice + trend,
~ income + farmPrice + trend))
restrict <- "demand_price + supply_farmPrice = 0"
fitsurRmat <- systemfit(eqSystem, method = "SUR",
restrict.matrix = restrict)
fitsurRmat
Rmat <- matrix(0, nrow = 1, ncol = 7)
Rmat[1, 2] <- 1
Rmat[1, 6] <- 1
qvec <- c(0)
fitsurRmatNum <- systemfit(eqSystem, method = "SUR",
restrict.matrix = Rmat, restrict.rhs = qvec)
fitsurRmatNum
Target <- data.frame(
x1 = c(0, 6, 14, 6, 12, -8, 2, 6, 10, 12),
x2 = c(-12, -10, -6, -2, 0, 2, 4, 4, 10, 10)
)
rownames(Target)
rownames(Target) <- paste0("j", 1:10)
Target
setwd("~/Documents/CQM/Derya/pkg/cloud")
save(list = Target, file = paste0("data/Target.rda"))
save(list = "Target", file = paste0("data/Target.rda"))
save(list = "Target", file = paste0("data/Target.rda"))
rm(list = ls())
library(devtools)
getwd()
load_all(".")
data(Target)
Target
?load_all
plot(Target)
plot(xlim = c(-19, 19), ylim = c(-19, 19),
Target, pch = 16, labels = rownames(Target))
plot(xlim = c(-19, 19), ylim = c(-19, 19),
Target, pch = 16, text = rownames(Target))
?plot
?text
plot(xlim = c(-19, 19), ylim = c(-19, 19),
Target, pch = 16)
plot(xlim = c(-19, 19), ylim = c(-19, 19),
Target, pch = 16, asp = 1)
text(Target, labels = rownames(Target))
text(Target, labels = rownames(Target))
?text
text(Target, labels = rownames(Target), pos = 1)
plot(xlim = c(-19, 19), ylim = c(-19, 19),
Target, pch = 16, asp = 1)
text(Target, labels = rownames(Target), pos = 1)
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE,
Target, pch = 16, asp = 1)
text(Target, labels = rownames(Target), pos = 1)
axis(1, at = c())
?axis
?box
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE,
Target, pch = 16, asp = 1)
box()
text(Target, labels = rownames(Target), pos = 1)
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE,
Target, pch = 16, asp = 1,
xlab = "", ylab = "")
box()
text(Target, labels = rownames(Target), pos = 1)
legend("topleft", legend = "Target example")
legend("topleft", legend = "Target example", box.lty = 0)
legend("topleft", legend = "Target example", box.lty = 0)
legend("topleft", legend = "Target example", box.lty = 0)
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE,
Target, pch = 16, asp = 1,
xlab = "", ylab = "")
box()
text(Target, labels = rownames(Target), pos = 1)
legend("topleft", legend = "Target example", box.lty = 0)
?box
?rect
rect(xleft = -19, xright = 19, ybottom = -19, ytop = 19)
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE,
Target, pch = 16, asp = 1,
xlab = "", ylab = "")
rect(xleft = -19, xright = 19, ybottom = -19, ytop = 19)
text(Target, labels = rownames(Target), pos = 1)
legend("topleft", legend = "Target example", box.lty = 0)
?legend
legend(x = -19, y = 19, legend = "Target example", box.lty = 0)
data(Target)
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE,
Target, pch = 16, asp = 1,
xlab = "", ylab = "")
rect(xleft = -19, xright = 19, ybottom = -19, ytop = 19)
text(Target, labels = rownames(Target), pos = 1)
legend(x = -19, y = 19, legend = "Target example", box.lty = 0)
rect(xleft = -19, xright = 19, ybottom = -19, ytop = 19, lty = 3)
data(Target)
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE,
Target, pch = 16, asp = 1,
xlab = "", ylab = "")
rect(xleft = -19, xright = 19, ybottom = -19, ytop = 19, lty = 3)
text(Target, labels = rownames(Target), pos = 1)
legend(x = -19, y = 19, legend = "Target example", box.lty = 0)
Target_barycenter <- barycenter(Target)
Target_barycenter
apply(Target, 1, sum)
points(Target_barycenter)
Target_barycenter
?points
?colSums
#' Barycenter of a point cloud.
#'
#' This function calculates the barycenter (weighted centroid) of a point cloud.
#' @param cloud An m-by-n matrix of coordinates for m points in n-dimensional space.
#' @param weights An m-element vector of point masses (weights).
#' @export
barycenter <-
function(cloud, weights) {
# If w is missing...
if (missing(weights)) weights <- rep(1, nrow(cloud))
# If w is a scalar...
if (length(weights) == 1) weights <- rep(weights, nrow(cloud))
# Calculate barycenter
matrix(colSums(cloud * weights) / sum(weights), nrow = 1)
}
Target_barycenter <- barycenter(Target)
Target_barycenter
points(Target_barycenter)
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE, asp = 1,
xlab = "", ylab = "")
points(Target_barycenter)
text(Target_barycenter, labels = expression(G[J]))
?text
text(Target_barycenter, labels = expression(G[J]), adj = c(0, 0))
text(Target_barycenter, labels = expression(G[J]), adj = c(1,1))
Target
Target_barycenter
rep(Target_barycenter, 1)
rep(Target_barycenter, 3)
matrix(Target_barycenter, ncol = ncol(Target))
matrix(Target_barycenter, nrow = nrow(Target), ncol = ncol(Target))
rep(Target_barycenter, 2)
replicate(Target_barycenter, 2)
?replicate
replicate(2, Target_barycenter)
replicate(2, as.vector(Target_barycenter))
replicate(2, Target_barycenter, simplify = FALSE)
Target_vectors <- Target - do.call(rbind,
replicate(nrow(Target),
Target_barycenter,
simplify = FALSE))
Target_vectors
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE, asp = 1,
Target, pch = 16, adj = Target_vectors,
xlab = "", ylab = "")
dim(Target)
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE, asp = 1,
xlab = "", ylab = "")
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE, asp = 1,
x = c(), y = c(),
xlab = "", ylab = "")
for (i in 1:nrow(Target)) {
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = (Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + 1) / 2)
}
i=1
(Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + 1) / 2
for (i in 1:nrow(Target)) {
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = (Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + 1) / 2)
}
i
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = (Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + 1) / 2)
Target[i, , drop = FALSE]
rownames(Target)[i]
for (i in 1:nrow(Target)) {
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = as.vector((Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + 1) / 2))
}
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = as.vector((Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + 1) / 2))
text(Target[i, , drop = FALSE], labels = rownames(Target)[i])
text(Target[i, , drop = FALSE], labels = rownames(Target)[i], adj = c(0, 0))
text(Target[i, , drop = FALSE], labels = rownames(Target)[i], adj = c(.48, .47))
(Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + 1) / 2
text(Target[i, , drop = FALSE], labels = rownames(Target)[i], adj = (Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + 1) / 2)
test <- (Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + 1) / 2
test
is.vector(test)
is.matrix(test)
str(test)
as.vector(test)
as.vector(as.matrix(test))
Target <- matrix(c(0, 6, 14, 6, 12, -8, 2, 6, 10, 12,
-12, -10, -6, -2, 0, 2, 4, 4, 10, 10),
nrow = 10, ncol = 2)
colnames(Target) <- paste0("x", 1:2)
rownames(Target) <- paste0("j", 1:10)
Target
save(list = "Target", file = paste0("data/Target.rda"))
Target_barycenter <- barycenter(Target)
Target_barycenter
Target_vectors <- Target - do.call(rbind,
replicate(nrow(Target),
Target_barycenter,
simplify = FALSE))
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE, asp = 1,
x = c(), y = c(),
xlab = "", ylab = "")
for (i in 1:nrow(Target)) {
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = (Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + 1) / 2)
}
text(Target_barycenter, labels = expression(G[J]), adj = c(1, 1))
?arrows
Target
arrows(x0 = Target_barycenter[, 1], y0 = Target_barycenter[, 2],
x1 = Target[, 1], y1 = Target[, 2])
arrows(x0 = Target_barycenter[, 1], y0 = Target_barycenter[, 2],
x1 = Target[, 1], y1 = Target[, 2],
length = .1, angle = 15)
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE, asp = 1,
x = c(), y = c(),
xlab = "", ylab = "")
text(Target_barycenter, labels = expression(G[J]), adj = c(1, 1))
for (i in 1:nrow(Target)) {
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = (Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + 1) / 2)
}
arrows(x0 = Target_barycenter[, 1], y0 = Target_barycenter[, 2],
x1 = Target[, 1], y1 = Target[, 2],
length = .1, angle = 15)
arrows(x0 = Target_barycenter[, 1], y0 = Target_barycenter[, 2],
x1 = Target[, 1], y1 = Target[, 2],
length = .2, angle = 15)
text(Target_barycenter, labels = expression(G[J]), adj = c(1.5, 1.5))
text(Target_barycenter, labels = expression(G[J]), adj = c(1.5, 1))
text(Target_barycenter, labels = expression(G[J]), adj = c(1.5, 1.25))
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE, asp = 1,
x = c(), y = c(),
xlab = "", ylab = "")
text(Target_barycenter, labels = expression(G[J]), adj = c(1.5, 1.25))
for (i in 1:nrow(Target)) {
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = (Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + 1) / 2)
}
arrows(x0 = Target_barycenter[, 1], y0 = Target_barycenter[, 2],
x1 = Target[, 1], y1 = Target[, 2],
length = .2, angle = 15)
rect(xleft = -19, xright = 19, ybottom = -19, ytop = 19, lty = 3)
legend(x = -19, y = 19, box.lty = 0,
legend = "Target: barycentric characterization")
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE, asp = 1,
x = c(), y = c(),
xlab = "", ylab = "")
text(Target_barycenter, labels = "G", adj = c(1.5, 1.25))
for (i in 1:nrow(Target)) {
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = (Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + 1) / 2)
}
arrows(x0 = Target_barycenter[, 1], y0 = Target_barycenter[, 2],
x1 = Target[, 1], y1 = Target[, 2],
length = .2, angle = 15)
rect(xleft = -19, xright = 19, ybottom = -19, ytop = 19, lty = 3)
legend(x = -19, y = 19, box.lty = 0,
legend = "Target: barycentric characterization")
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE, asp = 1,
x = c(), y = c(),
xlab = "", ylab = "")
text(Target_barycenter, labels = "G", adj = c(1.5, 1.25))
for (i in 1:nrow(Target)) {
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = (Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + 1))
}
arrows(x0 = Target_barycenter[, 1], y0 = Target_barycenter[, 2],
x1 = Target[, 1], y1 = Target[, 2],
length = .2, angle = 15)
rect(xleft = -19, xright = 19, ybottom = -19, ytop = 19, lty = 3)
legend(x = -19, y = 19, box.lty = 0,
legend = "Target: barycentric characterization")
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE, asp = 1,
x = c(), y = c(),
xlab = "", ylab = "")
text(Target_barycenter, labels = "G", adj = c(1.5, 1.25))
for (i in 1:nrow(Target)) {
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = (Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) + .5))
}
arrows(x0 = Target_barycenter[, 1], y0 = Target_barycenter[, 2],
x1 = Target[, 1], y1 = Target[, 2],
length = .2, angle = 15)
rect(xleft = -19, xright = 19, ybottom = -19, ytop = 19, lty = 3)
legend(x = -19, y = 19, box.lty = 0,
legend = "Target: barycentric characterization")
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE, asp = 1,
x = c(), y = c(),
xlab = "", ylab = "")
text(Target_barycenter, labels = "G", adj = c(1.5, 1.25))
for (i in 1:nrow(Target)) {
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = (Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) * 2 + .5))
}
arrows(x0 = Target_barycenter[, 1], y0 = Target_barycenter[, 2],
x1 = Target[, 1], y1 = Target[, 2],
length = .2, angle = 15)
rect(xleft = -19, xright = 19, ybottom = -19, ytop = 19, lty = 3)
legend(x = -19, y = 19, box.lty = 0,
legend = "Target: barycentric characterization")
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE, asp = 1,
x = c(), y = c(),
xlab = "", ylab = "")
text(Target_barycenter, labels = "G", adj = c(1.5, 1.25))
for (i in 1:nrow(Target)) {
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = (Target_vectors[i, ] / sum(Target_vectors[i, ] ^ 2) * -2 + .5))
}
arrows(x0 = Target_barycenter[, 1], y0 = Target_barycenter[, 2],
x1 = Target[, 1], y1 = Target[, 2],
length = .2, angle = 15)
rect(xleft = -19, xright = 19, ybottom = -19, ytop = 19, lty = 3)
legend(x = -19, y = 19, box.lty = 0,
legend = "Target: barycentric characterization")
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE, asp = 1,
x = c(), y = c(),
xlab = "", ylab = "")
text(Target_barycenter, labels = "G", adj = c(1.5, 1.25))
for (i in 1:nrow(Target)) {
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = (Target_vectors[i, ] / sqrt(sum(Target_vectors[i, ] ^ 2)) *
-2 + .5))
}
arrows(x0 = Target_barycenter[, 1], y0 = Target_barycenter[, 2],
x1 = Target[, 1], y1 = Target[, 2],
length = .2, angle = 15)
rect(xleft = -19, xright = 19, ybottom = -19, ytop = 19, lty = 3)
legend(x = -19, y = 19, box.lty = 0,
legend = "Target: barycentric characterization")
plot(xlim = c(-19, 19), ylim = c(-19, 19), axes = FALSE, asp = 1,
x = c(), y = c(),
xlab = "", ylab = "")
text(Target_barycenter, labels = "G", adj = c(1.5, 1.25))
for (i in 1:nrow(Target)) {
text(Target[i, , drop = FALSE], labels = rownames(Target)[i],
adj = .5 - (Target_vectors[i, ] / sqrt(sum(Target_vectors[i, ] ^ 2))))
}
arrows(x0 = Target_barycenter[, 1], y0 = Target_barycenter[, 2],
x1 = Target[, 1], y1 = Target[, 2],
length = .2, angle = 15)
rect(xleft = -19, xright = 19, ybottom = -19, ytop = 19, lty = 3)
legend(x = -19, y = 19, box.lty = 0,
legend = "Target: barycentric characterization")
